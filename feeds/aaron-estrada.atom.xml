<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>MetaPipe - Aaron Estrada</title><link href="https://www.metapipe.com/" rel="alternate"></link><link href="localhost:8000/feeds/aaron-estrada.atom.xml" rel="self"></link><id>https://www.metapipe.com/</id><updated>2017-05-26T15:30:00-06:00</updated><entry><title>Data Compression 101</title><link href="https://www.metapipe.com/blog/posts/2017/05/26/data-compression-101/" rel="alternate"></link><published>2017-05-26T15:30:00-06:00</published><updated>2017-05-26T15:30:00-06:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-05-26:/blog/posts/2017/05/26/data-compression-101/</id><summary type="html">&lt;p&gt;What is data compression and how can it help you in your &lt;span class="caps"&gt;VFX&lt;/span&gt; and Animation work? In this post we’ll look at the basics of data compression both lossless and lossy. What are the options and what are the tradeoffs when using compression vs. not using&amp;nbsp;compression?&lt;/p&gt;</summary><content type="html">&lt;p&gt;What is data compression and how can it help you in &lt;span class="caps"&gt;VFX&lt;/span&gt; and Animation?
In this post we’ll look at the basics of data compression both
lossless and lossy. What are the options and what are the tradeoffs
when using compression vs. not using&amp;nbsp;compression?&lt;/p&gt;
&lt;p&gt;I recently had a conversation with an experienced colleague that made
me realize just how much confusion there can be about data
compression, even among experienced folks. If my experienced colleague
could be confused I assume less experienced folks might be equally
confused. Let&amp;#8217;s demystify lossy vs. lossless compression for&amp;nbsp;good.&lt;/p&gt;
&lt;p&gt;The first thing that seems to confuse most people about compression is
that there are two types of compression: &lt;strong&gt;&lt;span class="caps"&gt;LOSSLESS&lt;/span&gt;&lt;/strong&gt; and
&lt;strong&gt;&lt;span class="caps"&gt;LOSSY&lt;/span&gt;&lt;/strong&gt;. Each is useful for its intended purpose. However, they have
slightly different use cases that only intersect in the goal of
reducing data footprint. I think that’s what makes the distinction
between them confusing for some of people. They both compress data, but
use wildly different strategies to achieve their&amp;nbsp;goal.&lt;/p&gt;
&lt;p&gt;Lossy compression, which we will dive into in more detail later, uses
techniques that discard some amount of data in order to achieve higher
compression ratios. When decoded, lossy compression schemes can only
create an approximation of the original data rather than reproducing
the original data faithfully. They can only be used used for types of
data that can tolerate data loss without destroying the intent of the
data. Examples of this type of data are images and sound, which can
tolerate some loss of data without a large perceptible loss in
quality. (at least not perceptible by&amp;nbsp;humans)&lt;/p&gt;
&lt;p&gt;Lossless compression on the other hand is used for reducing the
footprint of data when no loss of data is tolerable. Data integrity is
just as important as data compaction in this use case so certain
approaches to compression (like the various schemes of approximation
used by lossy compression techniques for sound and images) are off the&amp;nbsp;table.&lt;/p&gt;
&lt;p&gt;You may also have heard the phrase &amp;#8220;Perceptually Lossless&amp;#8221;. Well, I
hate to break it to you, but strictly speaking that means lossy. Almost
any lossy algorithm can be tuned to create a perceptually lossless
result. But &amp;#8220;Perceptually Lossless&amp;#8221; is not the same as lossless,
especially when absolute data fidelity is&amp;nbsp;important.&lt;/p&gt;
&lt;p&gt;For some reason, many people seem to assume that compression always
requires some kind of loss. This is perhaps because it’s a somewhat
intuitive conclusion. There must be some kind of equivalent exchange
in order shrink the size of a data set, right? How can a file be made
smaller without throwing data away? As we will see, throwing away data
to reduce the size of a data set is not a requirement. There is
however an equivalent exchange, which we will dive into&amp;nbsp;now.&lt;/p&gt;
&lt;p&gt;As it’s name implies, lossless compression is perfectly mathematically
reversible. It is lossless. What you get from when you unpack the data
from an algorithm is &lt;span class="caps"&gt;IDENTICAL&lt;/span&gt; to the original data, down the bit. If
not, the algorithm cannot be called lossless. Lossless compression
algorithms exploit the fact that most data has redundancy in it. They
identify redundancy in a dataset and create shorthand representations
of the redundant data which can be stored in a more compact
form. Examples of common lossless compression tools are zip, gzip,
7zip, xz, bzip2. They are based on the plethora of
&lt;a href="https://en.wikipedia.org/wiki/Category:Lossless_compression_algorithms"&gt;lossless data compression algorithms&lt;/a&gt;
available in the wild.  This type of tool is commonly used to compress
data that can’t tolerate loss of any kind. Examples might be text
files like logs, scene descriptions like .ma, .mb and .hip files and
geometry formats like .bgeo, .obj etc. It can also be used to compress
image data when any amount of quality loss is unacceptable.  How
compressible a particular data set is will depend on the content of
the data and the algorithm. Certain algorithms perform better on
specific types of data. There is no perfect algorithm, though there
are several good general purpose compression algorithms. Highly
compressible data (that is data with a lot of redundancy in the set)
might allow for compression of 50% or better, whereas data with
practically no redundancy might not compress at all and might in fact
become larger if run through a compression algorithm. Truly random
data cannot be&amp;nbsp;compressed.&lt;/p&gt;
&lt;p&gt;With lossless compression, the trade off for smaller file sizes is
increased computation time and &lt;span class="caps"&gt;RAM&lt;/span&gt; usage during compression and
decompression. The computational cost will depend on the specific
algorithm being used. A good rule of thumb is, the more compute and
&lt;span class="caps"&gt;RAM&lt;/span&gt; intensive an algorithm, the better the compression it will
provide. (Though not always. Some implementations of even the same
algorithm can out-perform more poorly implemented versions of the same
algorithm. It&amp;#8217;s tricky to do straight apples to apples comparisons&amp;nbsp;sometimes!)&lt;/p&gt;
&lt;p&gt;Due to how fast modern CPUs have become an unexpected benefit of using
compression might be faster overall file access. This can be true for
even fast storage devices like SSDs, but is especially true for slower
devices like hard drives and network attached storage.  Assuming the
cost of on-the-fly decompression is less than the speed up of
transferring the smaller compressed file from disk or over a network,
the end result will be overall faster file access. Given just how much
&lt;span class="caps"&gt;CPU&lt;/span&gt; power modern computers have to spare, this is nearly always true these
days. This speed benefit is something many people don’t consider. There
still seems to be a prevailing belief (which has been outdated for
years) that compression is slow. It’s simply not true any more.  We
often have so many &lt;span class="caps"&gt;CPU&lt;/span&gt; cycles to spare we might as well use them for
something&amp;nbsp;useful.&lt;/p&gt;
&lt;p&gt;As an added benefit, if the overall network usage can be cut in half
by using compression, it means twice as many files can be copied over
a given network in the same amount of time. It might not seem like
such a big deal if you are working alone on a fast network, but if
there are tens or hundreds of other people working on the same network
and automated processes like a render farm hitting the same pool of
storage, the bandwidth being consumed adds up fast. In that case
compression can be a huge win.  The benefits are obviously apparent
when network bandwidth is highly constrained, for example when sending
data over the Internet.  Most people seem to understand intuitively
why it works on the web, but fail to generalize the same concept to
local area networks. Network bandwidth is never infinite, no matter
how fast a&amp;nbsp;network.&lt;/p&gt;
&lt;p&gt;In addition to fitting more info over the a network connection,
compressing the files also allows for more files to fit on disk. It’s
a double win in most cases. Consider the value of space on an &lt;span class="caps"&gt;SSD&lt;/span&gt;,
which is still priced at a premium compared to hard drive space. The
only trade off is that there is a potential computational cost, but as
we will see, that cost can be balanced against the upside of the other
factors in&amp;nbsp;play.&lt;/p&gt;
&lt;p&gt;Let’s look at a simple example where we losslessly compress some text
files with gzip, a very common compression tool available in the base
install of pretty much every Linux distro. You can use these as
inspiration for how you manage files on your file&amp;nbsp;system.&lt;/p&gt;
&lt;p&gt;First we will run them through md5sum to generate checksums for
them. A checksum is like the fingerprint for the data in a file. If
the data changes even the tiniest amount, the checksum will&amp;nbsp;change.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/project_gutenberg$ md5sum *.txt | tee  MD5SUMS
022cb6af4d7c84b4043ece93e071d8ef  Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8.txt
424c7f50d156aa6c021ee616cfba6e31  Moby_Dick_by_Herman_Melville_utf8.txt
5f2319239819dfa7ff89ef847b08aff0  Pride_and_Prejudice_by_Jane_Austen_utf8.txt
8676b5095efce2e900de83ab339ac753  The_Art_of_War_by_Sun_Tzu_utf8.txt
2c89aeaa17956a955d789fb393934b9a  War_and_Peace_by_Leo_Tolstoy_utf8.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We used ‘tee’ to also redirect the output to the file &lt;span class="caps"&gt;MD5SUMS&lt;/span&gt; so we
can keep that info around for later. Now let’s look at the sizes of
the&amp;nbsp;files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/project_gutenberg$ ls -lh *.txt
-rw-rw-r-- 1 aaron aaron 439K Apr 15 21:11 Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8.txt
-rw-rw-r-- 1 aaron aaron 1.3M Apr 15 21:13 Moby_Dick_by_Herman_Melville_utf8.txt
-rw-rw-r-- 1 aaron aaron 710K Apr 15 21:12 Pride_and_Prejudice_by_Jane_Austen_utf8.txt
-rw-rw-r-- 1 aaron aaron 336K Apr 15 21:09 The_Art_of_War_by_Sun_Tzu_utf8.txt
-rw-rw-r-- 1 aaron aaron 3.3M Apr 15 21:06 War_and_Peace_by_Leo_Tolstoy_utf8.txt
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Even as plain utf-8, War and Peace takes 3.3 megs of disk space. Now we
know how big the files started out and are and what their md5sums are,
let’s compress them with good old gzip. I’ll time each compression so
we can get a sense of how much time it’s costing us to compress each&amp;nbsp;file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;project_gutenberg&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;)&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;gzip&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;done&lt;/span&gt;
&lt;span class="nt"&gt;Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="nt"&gt;62&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;045s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;044s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;000s&lt;/span&gt;

&lt;span class="nt"&gt;Moby_Dick_by_Herman_Melville_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="nt"&gt;59&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Moby_Dick_by_Herman_Melville_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;125s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;116s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;008s&lt;/span&gt;

&lt;span class="nt"&gt;Pride_and_Prejudice_by_Jane_Austen_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;64&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Pride_and_Prejudice_by_Jane_Austen_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;079s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;079s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;000s&lt;/span&gt;

&lt;span class="nt"&gt;The_Art_of_War_by_Sun_Tzu_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;      &lt;span class="nt"&gt;62&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;The_Art_of_War_by_Sun_Tzu_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;055s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;043s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;012s&lt;/span&gt;

&lt;span class="nt"&gt;War_and_Peace_by_Leo_Tolstoy_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="nt"&gt;63&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;War_and_Peace_by_Leo_Tolstoy_utf8&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;txt&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;354s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;321s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;018s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;We’ll use the “real” time which is how long we had to wait for each
one of these files to compress inclusive of all factors. Nice! Every
single one of these text files compressed more than 50% and took less
than half a second (on one core&amp;#8230; gzip is only single threaded!). War
and Peace, our largest file, actually got the second highest
compression ratio. (Perhaps it’s sheer size increased the chances of
there being redundancies in it gzip could compress away.)  Let’s check
out the absolute file sizes of the now compressed&amp;nbsp;files.&lt;/p&gt;
&lt;p&gt;One of the things I like about gzip and similar archiving tools on
Linux is that they are typically able to compress files in place. As
you can see in my example, all the txt files have been replaced by
their .gz compressed counterpart. This is great if you need to free up
space, but don’t have a lot of disk space to work with since gzip can
go through all the files, file by file, and compress them one at a
time cleaning up the old uncompressed files for you as it goes. (Even
if the tool itself wasn’t able to do this you can easily script a
simple one-liner in bash to do it, which I demonstrate&amp;nbsp;later.)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/project_gutenberg$ ls -lh *.txt.gz
-rw-rw-r-- 1 aaron aaron 166K Apr 15 21:11 Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8.txt.gz
-rw-rw-r-- 1 aaron aaron 501K Apr 15 21:13 Moby_Dick_by_Herman_Melville_utf8.txt.gz
-rw-rw-r-- 1 aaron aaron 255K Apr 15 21:12 Pride_and_Prejudice_by_Jane_Austen_utf8.txt.gz
-rw-rw-r-- 1 aaron aaron 128K Apr 15 21:09 The_Art_of_War_by_Sun_Tzu_utf8.txt.gz
-rw-rw-r-- 1 aaron aaron 1.2M Apr 15 21:06 War_and_Peace_by_Leo_Tolstoy_utf8.txt.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Sweet! They are all certainly much smaller than they were. But was the
data altered in any way? Let’s uncompress the files and check the
md5sums. A difference of even a single bit will cause the md5sum to
change so we’ll be able to spot if the output files are identical to
the&amp;nbsp;originals.&lt;/p&gt;
&lt;p&gt;Let’s use the gunzip command to uncompress all the files and if that
succeeds, we’ll have md5sum check the checksums we cached away&amp;nbsp;earlier.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/project_gutenberg$ gunzip *.gz &amp;amp;&amp;amp; md5sum -c MD5SUMS
Frankenstein_by_Mary_Wollstonecraft_Shelley_utf8.txt: OK
Moby_Dick_by_Herman_Melville_utf8.txt: OK
Pride_and_Prejudice_by_Jane_Austen_utf8.txt: OK
The_Art_of_War_by_Sun_Tzu_utf8.txt: OK
War_and_Peace_by_Leo_Tolstoy_utf8.txt: OK
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;“&lt;span class="caps"&gt;OK&lt;/span&gt;” means the file matched the md5sum in the file &lt;span class="caps"&gt;MD5SUMS&lt;/span&gt; that we
checked it against. The files we round-tripped through gzip are
identical to the originals. If you are an old hand with archive tools
like zip and gzip this won&amp;#8217;t be a surprise to you. If not, you just
learned something&amp;nbsp;new.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;OK&lt;/span&gt;, so we proved the output is identical and that it can compress
text, but how about something more production data-like? How about
some 3D models? We’ll skip checking the md5sums since hopefully I’ve
sufficiently demonstrated how lossless compression is in fact&amp;nbsp;lossless.&lt;/p&gt;
&lt;p&gt;First let’s check the files&amp;nbsp;sizes.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/3d_models$ ls -lh
total 83M
-rw-rw-r-- 1 aaron aaron  11M Jul 13  2010 Advanced_Crew_Escape_Suit.obj
-rw-rw-r-- 1 aaron aaron  43M Jul 13  2010 Extravehicular_Mobility_Unit.obj
-rw------- 1 aaron aaron 468K Oct 29  2008 Shuttle.3ds
-rw------- 1 aaron aaron 677K Sep  5  2008 skylab_carbajal.3ds
-rw-rw-r-- 1 aaron aaron  28M Jun  9  2015 Space_Exploration_Vehicle.obj
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;These are some non-trivial file sizes here. Plus we have some binary
files to work with (the .3ds files). Let’s compress them and see how
well gzip does. We’ll time each one again so we know what it’s costing
us in cpu&amp;nbsp;time.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;3d_models&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;*.?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;?);&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;gzip&lt;/span&gt; &lt;span class="nt"&gt;-v&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt;&lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;done&lt;/span&gt;
&lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="nt"&gt;78&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;8&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;920s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;891s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;027s&lt;/span&gt;

&lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;    &lt;span class="nt"&gt;80&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;421s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;287s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;119s&lt;/span&gt;

&lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;59&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;045s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;036s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;007s&lt;/span&gt;

&lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;     &lt;span class="nt"&gt;62&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;4&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;027s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;026s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;005s&lt;/span&gt;

&lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;   &lt;span class="nt"&gt;75&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;9&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="nt"&gt;--&lt;/span&gt; &lt;span class="nt"&gt;replaced&lt;/span&gt; &lt;span class="nt"&gt;with&lt;/span&gt; &lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;gz&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;939s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m2&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;813s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;114s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Ok. Now that we are compressing some hefty files the time it’s taking
to compress them has gone up quite a bit. It’s pretty apparent
compression isn’t free. How much disk space did we save though? Was
the disk space savings worth the computational&amp;nbsp;cost?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;aaron@minty:~/3d_models$ ls -lh
total 18M
-rw-rw-r-- 1 aaron aaron 2.3M Jul 13  2010 Advanced_Crew_Escape_Suit.obj.gz
-rw-rw-r-- 1 aaron aaron 8.4M Jul 13  2010 Extravehicular_Mobility_Unit.obj.gz
-rw------- 1 aaron aaron 192K Oct 29  2008 Shuttle.3ds.gz
-rw------- 1 aaron aaron 255K Sep  5  2008 skylab_carbajal.3ds.gz
-rw-rw-r-- 1 aaron aaron 6.7M Jun  9  2015 Space_Exploration_Vehicle.obj.gz
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;It took 7.352 seconds, but we were able to pack 83M of data into
18M. We actually got better compression ratios with the
production-like data than we got with english language text! If we
were to use a faster setting on gzip or use an alternate algorithm
like lz4 perhaps we can balance this compute/size trade off so the cpu
cost is nominal yet we still gain the benefit of the smaller file
sizes. lz4 is a newer faster algorithm than gzip (zlib). It’s designed
for &lt;em&gt;speed&lt;/em&gt; rather than maximum compression. The goal the the authors
of lz4 had was to reduce the computational cost of compression enough
that we gain all the benefits of compression with very little of the
computational expense. It’s meant to be very high-throughput. As we
will see, they they’ve succeeded.  lz4 is available in the repos of pretty much
every Linux distro nowadays. You just might need to install it
yourself as it&amp;#8217;s not always installed by default. Let’s give it a&amp;nbsp;try.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;3d_models&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;*.?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;?);&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;lz4&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;done&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;11299355&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;4110010&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;36&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;37&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;043s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;037s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;008s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;44645513&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;15566248&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;34&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;87&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;184s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;119s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;064s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;478597&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;273672&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;57&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;18&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;004s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;000s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;003s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;692377&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;360167&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;52&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;02&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;004s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;003s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;000s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;29032555&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;12957232&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;44&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;63&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;127s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;094s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;031s&lt;/span&gt;

&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;3d_models&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt;
&lt;span class="nt"&gt;total&lt;/span&gt; &lt;span class="nt"&gt;32M&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;4&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;0M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;36&lt;/span&gt; &lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt;  &lt;span class="nt"&gt;15M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;36&lt;/span&gt; &lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;268K&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;36&lt;/span&gt; &lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;352K&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;36&lt;/span&gt; &lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt;  &lt;span class="nt"&gt;13M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;36&lt;/span&gt; &lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Looking good! I would practically call this “free” compression. It
might take us nearly as long to simply copy these files as we are able
to compress them. As you can see, it’s possible to balance compression
times vs. file sizes. lz4 can&amp;#8217;t typically produce as high a compression
ratio as gzip and others, but the tradeoff is that it’s substantially&amp;nbsp;faster.&lt;/p&gt;
&lt;p&gt;I’d hesitate to consider the time measurements very scientifically
valid on this example since they are so short. It only took 0.362
seconds to compress every file and yet we still got better than 50%
compression across all the files. By default lz4 is tuned to be as
fast as possible. We might be able to afford to give it a bit more
time for compression. Let’s give it a try with the -4 flag (higher
compression than the default&amp;nbsp;-1)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;3d_models&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;for&lt;/span&gt; &lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="o"&gt;$(&lt;/span&gt;&lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="o"&gt;*.?&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="nt"&gt;b&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt;&lt;span class="nt"&gt;d&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="o"&gt;?);&lt;/span&gt; &lt;span class="nt"&gt;do&lt;/span&gt; &lt;span class="nt"&gt;time&lt;/span&gt; &lt;span class="nt"&gt;lz4&lt;/span&gt; &lt;span class="nt"&gt;-4&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class="nt"&gt;rm&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt;&lt;span class="nt"&gt;file&lt;/span&gt; &lt;span class="o"&gt;;&lt;/span&gt; &lt;span class="nt"&gt;done&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;11299355&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;3211153&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;28&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;42&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;235s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;198s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;031s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;44645513&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;12460628&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;27&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;91&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;945s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;877s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;071s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;478597&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;255729&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;53&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;43&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;011s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;011s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;000s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;692377&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;348951&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;50&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;40&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;016s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;011s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;004s&lt;/span&gt;

&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;filename&lt;/span&gt; &lt;span class="nt"&gt;will&lt;/span&gt; &lt;span class="nt"&gt;be&lt;/span&gt; &lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;Compressed&lt;/span&gt; &lt;span class="nt"&gt;29032555&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="nt"&gt;into&lt;/span&gt; &lt;span class="nt"&gt;9917149&lt;/span&gt; &lt;span class="nt"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;==&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;34&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;16&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt;
&lt;span class="nt"&gt;real&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;697s&lt;/span&gt;
&lt;span class="nt"&gt;user&lt;/span&gt;    &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;644s&lt;/span&gt;
&lt;span class="nt"&gt;sys&lt;/span&gt; &lt;span class="nt"&gt;0m0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;045s&lt;/span&gt;

&lt;span class="nt"&gt;aaron&lt;/span&gt;&lt;span class="p"&gt;@&lt;/span&gt;&lt;span class="k"&gt;minty&lt;/span&gt;&lt;span class="o"&gt;:~/&lt;/span&gt;&lt;span class="nt"&gt;3d_models&lt;/span&gt;&lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="nt"&gt;ls&lt;/span&gt; &lt;span class="nt"&gt;-lh&lt;/span&gt;
&lt;span class="nt"&gt;total&lt;/span&gt; &lt;span class="nt"&gt;25M&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;3&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;1M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50&lt;/span&gt; &lt;span class="nt"&gt;Advanced_Crew_Escape_Suit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt;  &lt;span class="nt"&gt;12M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50&lt;/span&gt; &lt;span class="nt"&gt;Extravehicular_Mobility_Unit&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;250K&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50&lt;/span&gt; &lt;span class="nt"&gt;Shuttle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;341K&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50&lt;/span&gt; &lt;span class="nt"&gt;skylab_carbajal&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;3ds&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;span class="nt"&gt;-rw-rw-r--&lt;/span&gt; &lt;span class="nt"&gt;1&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;aaron&lt;/span&gt; &lt;span class="nt"&gt;9&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;5M&lt;/span&gt; &lt;span class="nt"&gt;Apr&lt;/span&gt; &lt;span class="nt"&gt;15&lt;/span&gt; &lt;span class="nt"&gt;22&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="nd"&gt;50&lt;/span&gt; &lt;span class="nt"&gt;Space_Exploration_Vehicle&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;obj&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nc"&gt;lz4&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Not bad! We have improved our overall compression ratio, but no file
takes more than 1 second to compress.  One nice thing about lz4 is
that it’s extremely fast to decompress, regardless of what settings
are used for compression. If you feel like throwing more compute at it
you can increase the compression ratios provided by lz4 without any
real impact on the later decompression of the files. Considering files
typically only need to be compressed once, but will likely be read and
&lt;em&gt;decompressed&lt;/em&gt; many times, it&amp;#8217;s a huge feature of the algorithm. It&amp;#8217;s
very production friendly that&amp;nbsp;way.&lt;/p&gt;
&lt;p&gt;So that was a run through of how you might compress files with
lossless compression utilities in the &lt;span class="caps"&gt;OS&lt;/span&gt;, but what about applications?
How do you make them use compressed&amp;nbsp;files?&lt;/p&gt;
&lt;p&gt;Because so much of the data we use in &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation can benefit
from compression, many of the modern file formats we use have some
provision for transparent lossless compression built in. OpenEXR has
several options for lossless compression (as well as lossy, which
we’ll look at later) Alembic has deduplication to help compress data
and OpenVDB has built in compression.  Many applications can also
transparently deal with files compressed with operating system tools
like gzip. For example, Houdini can transparently deal with .gz files
(actually any compression type if you have the handler set up for it)
Many other programs have such a capability and if they don’t have it
built in often times you can extend them by scripting support for it&amp;nbsp;yourself.&lt;/p&gt;
&lt;p&gt;When using the native lossless compression in formats like OpenEXR and
&lt;span class="caps"&gt;PNG&lt;/span&gt;, you must often make the same trade off of computational cost vs
compression. I personally tend to leave some kind of compression on
full time since I know that at some point in the files life cycle it
will go through some kind of &lt;span class="caps"&gt;IO&lt;/span&gt; bottleneck, either by needing to be
copied over a network or to a bandwidth constrained storage device
like a &lt;span class="caps"&gt;USB&lt;/span&gt; 3.0 drive. File size is &lt;span class="caps"&gt;ALWAYS&lt;/span&gt; going to become an issue at
some point in a project lifecycle due to either storage or bandwidth
constraints so it make sense to protect against a &amp;#8220;crunch&amp;#8221; by always
using lossless compression from the start.  Just do some tests for
yourself to make sure it not too computationally expensive to live
with and that the trade off is worth it to you. You’ll most likely
find that it&amp;nbsp;is.&lt;/p&gt;
&lt;p&gt;One last note on lossless compression. Many filesystems like &lt;span class="caps"&gt;ZFS&lt;/span&gt; and
even &lt;span class="caps"&gt;NTFS&lt;/span&gt; offer on-the-fly data compression. &lt;span class="caps"&gt;ZFS&lt;/span&gt; in particular is
quite good at on-the-fly data compression and the recommended setting
for it is to enable lz4 compression for all file
systems.  On-the-fly file compression is great since it does reduce
your disk footprint. However, if you are using a &lt;span class="caps"&gt;NAS&lt;/span&gt; it may not
improve performance much since the network will likely be your real
bottleneck. It’s for this reason I still advocate using application
level compression on files when possible. Your files will also already
be staged for archiving if they are already compressed before needing
to be&amp;nbsp;archived.&lt;/p&gt;
&lt;p&gt;Now let’s look at lossy compression. If you’ve ever done any photo
editing or used a digital camera, you’ve probably encountered the
&lt;a href="https://en.wikipedia.org/wiki/JPEG"&gt;&lt;span class="caps"&gt;JPEG&lt;/span&gt;&lt;/a&gt; image format. &lt;span class="caps"&gt;JPEG&lt;/span&gt; is an
extremely common format for lossy storage of image data. It uses
Discrete Cosine Transforms to decompose an image into a frequency
domain representation of itself. When you change the quality slider on
a &lt;span class="caps"&gt;JPEG&lt;/span&gt; saver what you are doing is telling the saver how much
frequency data to throw away.  &lt;span class="caps"&gt;JPEG&lt;/span&gt;’s &lt;span class="caps"&gt;DCT&lt;/span&gt; quantizing approach is tuned
to somewhat match human perception. It selectively removes detail
starting from the high frequency detail that a human is not likely to
notice missing. The lower you turn the quality slider, the more detail
it removes until it begins to remove even the lower
frequencies. Eventually the loss in quality will become apparent, but
it’s possible to get reductions of 6 to even 10x before the quality
reduction is visible to most humans.  With a lossy compression scheme
like &lt;span class="caps"&gt;JPEG&lt;/span&gt;, it’s impossible to fully reverse the algorithm to reproduce
the original data. It is only possible to create an
approximation. There is no going back to the original since the &lt;span class="caps"&gt;JPEG&lt;/span&gt;
algorithm literally threw away data to achieve its high compression&amp;nbsp;rate.&lt;/p&gt;
&lt;p&gt;Because lossy formats can lose additional data with each generation
it’s possible to get compounding loss with each generation of
re-compression. This is why it’s important avoid recompressing lossy
codecs when&amp;nbsp;possible.&lt;/p&gt;
&lt;p&gt;In version 2.2
&lt;a href="https://en.wikipedia.org/wiki/OpenEXR#Compression_methods"&gt;OpenEXR&lt;/a&gt;
gained a lossy codec donated by Dreamworks Animation. It’s like &lt;span class="caps"&gt;JPEG&lt;/span&gt;,
but allows for lossy compression of floating point data. I personally
would be judicious with my use of lossy codecs for &lt;span class="caps"&gt;VFX&lt;/span&gt; work, but there
are cases where they could be useful. It boils down to the same
balancing of concerns I mentioned earlier of compute, network
bandwidth, disk footprint, etc. For example, perhaps you&amp;#8217;d prefer to
keep a lot of versions your work on disk rather than have perfect
quality in every version. Perhaps you are only making draft versions
and perfect quality isn’t even important or you have a real-time
playback requirement that only a lossy codec can satisfy. Maybe your
network is very slow and the only way you can tame the pain of your
slow network is by compressing the heck out of your images. Having to
live with a little bit of lossiness in your images might be better
than not delivering a job at all!  For years, Dreamworks saved &lt;span class="caps"&gt;ALL&lt;/span&gt;
their output files into their own proprietary .r format using a custom
12 bit &lt;span class="caps"&gt;JPEG&lt;/span&gt;-like codec. JPEGing every frame never seemed to be the
detail that hurt their box office numbers!  The new &lt;span class="caps"&gt;DWAA&lt;/span&gt; and &lt;span class="caps"&gt;DWAB&lt;/span&gt;
codecs in OpenEXR are their contribution to the industry
standard. The &lt;span class="caps"&gt;JPEG&lt;/span&gt;-like codec served them well in their own business
so I must assume they believed others might benefit from it&amp;nbsp;also.&lt;/p&gt;
&lt;p&gt;When it comes to lossy compression, the trade off is usually about how
much visual loss you are willing to live with vs. how much disk space
you save in exchange. Most lossy codecs are computationally intense as
they include in their pipelines the very same algorithms used in
lossless compression (like Huffman coding), in addition to
others. Video codecs are a pretty complicated topic and rather than go
into all the detail I will stick to a 10,000ft&amp;nbsp;overview.&lt;/p&gt;
&lt;p&gt;When it comes to video codecs, there are two basic types, I-Frame only
and Long &lt;span class="caps"&gt;GOP&lt;/span&gt;. I-Frame only codecs compress video on a frame by frame
basis, that is to say, there are no dependencies between
frames. Examples of this are
&lt;a href="https://en.wikipedia.org/wiki/Avid_DNxHD"&gt;DNxHD&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Apple_ProRes"&gt;ProRes&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/Motion_JPEG"&gt;&lt;span class="caps"&gt;MJPEG&lt;/span&gt;&lt;/a&gt; and frame based
formats like &lt;span class="caps"&gt;JPEG2000&lt;/span&gt;, &lt;span class="caps"&gt;JPEG&lt;/span&gt;, &lt;span class="caps"&gt;PNG&lt;/span&gt;,
&lt;a href="https://en.wikipedia.org/wiki/OpenEXR"&gt;OpenEXR&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Digital_Picture_Exchange"&gt;&lt;span class="caps"&gt;DPX&lt;/span&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Depending on semantics, “Uncompressed Video” could also mean
“losslessly compressed” if such an option is available. These would
usually be included in the family of I-Frame codecs. There are several
lossless codecs available for movie type formats including
&lt;a href="https://en.wikipedia.org/wiki/FFV1"&gt;&lt;span class="caps"&gt;FFV1&lt;/span&gt;&lt;/a&gt;, and
&lt;a href="https://en.wikipedia.org/wiki/Huffyuv"&gt;&lt;span class="caps"&gt;HUFFYUV&lt;/span&gt;&lt;/a&gt; Lossless video codecs
are great since they kind of straddle the fence between using no
compression at all and lossy options. They don’t provide the same
level of compression as lossy codecs, but they don’t damage the image
at all&amp;nbsp;either.&lt;/p&gt;
&lt;p&gt;Long Group of Pictures (&lt;span class="caps"&gt;GOP&lt;/span&gt;) codecs encode video by exploiting the
fact that often there are usually similarities between frames in
video. In a Long &lt;span class="caps"&gt;GOP&lt;/span&gt; type codec, each from may be dependent on frames
that come before or after the current frame. As a result, these codecs
tend to be quite computationally intensive. They are also tricky to
decode when shuttling forward or especially backward due to the
dependence on the surrounding frames. Examples of Long &lt;span class="caps"&gt;GOP&lt;/span&gt; codecs are
common video codecs like
&lt;a href="https://en.wikipedia.org/wiki/H.264/MPEG-4_AVC"&gt;h.264&lt;/a&gt;,
&lt;a href="https://en.wikipedia.org/wiki/MPEG-2"&gt;mpeg2&lt;/a&gt; and
&lt;a href="https://en.wikipedia.org/wiki/Theora"&gt;theora&lt;/a&gt;.  The benefit is that
Long &lt;span class="caps"&gt;GOP&lt;/span&gt; codecs are able to produce significantly higher compression
ratios than I-Frame only codec. (or superior quality for the same&amp;nbsp;bandwidth)&lt;/p&gt;
&lt;p&gt;For &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation work, both types of formats have their
place. However, for the bulk of &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation production work
frame based formats like OpenEXR tend to be the most suitable. This is
because of the frame-by-frame nature of the work. While it’s possible
read movie type formats with frame accuracy, it’s not possible to
write into the middle of a file easily. Take for example rendering
from a render farm. When a shot is submitted to a render farm, a grid
of machines are all unleashed on the same scene for rendering. There
might be 100 computers each running a different frame of the
scene. When it’s time for the computer to write it’s completed frame
to disk, how would it write it into the correct place in a movie file?
It’s much easier for it to simply write a single numbered frame to
disk. Once all the frames for the shot are rendered, a follow up job
can be triggered that will compile the frames into a movie file for
playback in a sweatbox or at the artist’s desk.  Depending on what
frame format was used, it’s sometimes possible to create a movie from
a sequence of frames, even if they are in a lossy format, by simply
re-wrapping the data into movie file with no re-compression of the&amp;nbsp;data.&lt;/p&gt;
&lt;p&gt;The choice of whether to use lossy or lossless compression for output
frames and preview movies depends on the resources available and the
goals of the studio. If the studio has a lot of resources and a purist
approach to the process, they can stick with losslessly compressed
formats. If saving disk space and network bandwidth is a higher
priority, then it’s possible that lossy formats might have a place in
parts of the&amp;nbsp;pipeline.&lt;/p&gt;
&lt;p&gt;I hope this blog post provides you with a good starting place for
thinking about how you might deploy compression in your&amp;nbsp;pipeline.&lt;/p&gt;
&lt;p&gt;I&amp;#8217;ll be rolling a version of this into my Pipeline 101 eBook. If you
don&amp;#8217;t have it yet you can get a free copy of it here:
&lt;a href="https://www.metapipe.com/offers/pipeline101"&gt;Pipeline&amp;nbsp;101&lt;/a&gt;&lt;/p&gt;</content><category term="tech"></category><category term="explainer"></category><category term="Linux"></category></entry><entry><title>Creating Panoramas for CG</title><link href="https://www.metapipe.com/blog/posts/2017/04/07/creating-panos-for-cg/" rel="alternate"></link><published>2017-04-07T16:30:00-06:00</published><updated>2017-04-07T16:30:00-06:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-04-07:/blog/posts/2017/04/07/creating-panos-for-cg/</id><summary type="html">&lt;p&gt;Free Nuke tutorials on how to create Tile Worlds and use Panoramas in &lt;span class="caps"&gt;CG&lt;/span&gt;. &lt;span class="caps"&gt;PLUS&lt;/span&gt;, advanced green screen matte extraction&amp;nbsp;techniques.&lt;/p&gt;</summary><content type="html">&lt;p&gt;Tile Worlds, Camera Projection and Image Based Lighting all have one thing in
common: They use photographic elements as their main source inputs. While I tend
to say this about nearly every &lt;span class="caps"&gt;VFX&lt;/span&gt; technique (I love them all!), the above are
among my favorites. There is nothing more photo-realistic than a photograph or
live action plate so it’s the best source material one can hope for! More
excitingly, once you understand how they work, the techniques allow you to mix
and match and move back and forth between &lt;span class="caps"&gt;C.G.&lt;/span&gt; and reality as you see&amp;nbsp;fit.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Tileworld How-To Illustration" src="/static/img/blog/tile_world_figure_s.jpg"&gt;&lt;/p&gt;
&lt;p&gt;After releasing the &lt;a href="/offers/railyard-hdri/"&gt;free &lt;span class="caps"&gt;HDRI&lt;/span&gt; panoramas&lt;/a&gt;, we received some questions as to just
how they might be useful for &lt;span class="caps"&gt;VFX&lt;/span&gt;.  It’s easy to say “Virtual Set” and &amp;#8220;&lt;span class="caps"&gt;IBL&lt;/span&gt;&amp;#8221; but
not so easy to visualize if you aren’t familiar with the techniques involved.
To help everyone build some new skills, we decided to give away some lessons on
Tile Worlds and panoramas so people can try their hand at using the panoramas we
gave away last week. It doesn&amp;#8217;t cover Image Based Lighting but it should give
you a sense of how you can use panoramas for virtual&amp;nbsp;sets.&lt;/p&gt;
&lt;p&gt;As I mentioned, along with matte paintings, camera projection, and &lt;span class="caps"&gt;IBL&lt;/span&gt; these are
some of my favorite &lt;span class="caps"&gt;VFX&lt;/span&gt; techniques. It’s possible to get very impressive results
without a huge amount of effort. I’m excited to be able to share these
techniques with you and hope they help you create some amazing stuff. In fact,
everyone here would love to see what you come up with. If you make something
cool using these techniques, please post them on your video sharing site of
choice and share the link with us:
&lt;a href="https://twitter.com/fullmetapipe"&gt;@FullMetaPipe&lt;/a&gt; on Twitter or
&lt;a href="https://www.facebook.com/metapipe"&gt;@MetaPipe&lt;/a&gt; on&amp;nbsp;Facebook.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Pano/Tileworld WIP" src="/static/img/blog/tile_world_figure2_s.jpg"&gt;&lt;/p&gt;
&lt;p&gt;You can use the non-commercial version of Nuke or use Blackmagic Design&amp;#8217;s Fusion
for your experiments. The techniques work in either. They are probably adaptable
to After Effects, though I’m not familiar enough with the 3D system in &lt;span class="caps"&gt;AE&lt;/span&gt; to say
for certain. The Tile World technique will also work in any 3D package that has
a camera with a physically accurate aperture gate and lens system so you can
even do it right in your favorite 3D system if you&amp;nbsp;like.&lt;/p&gt;
&lt;p&gt;Here are the links to the lessons (over two and a half hours of free training).
You need to register but the lessons are free: &lt;a href="http://courses.learnvfx.com/courses/nk101?coupon=metapipe_blog_pano_promo"&gt;&lt;span class="caps"&gt;NK101&lt;/span&gt; Lesson 7: Intro to Nuke’s
3D system and Tile
Worlds&lt;/a&gt;
&lt;a href="http://courses.learnvfx.com/courses/nk201?coupon=metapipe_blog_pano_promo"&gt;&lt;span class="caps"&gt;NK201&lt;/span&gt; Lesson 3: Mixing Scale and Deep&amp;nbsp;Compositing&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;If you like what you see, here is a coupon code for 80% off anything at
LearnVFX:&amp;nbsp;metapipe_blog_pano_promo&lt;/p&gt;
&lt;p&gt;I already applied it to the links above for you. You can also manually enter it
at&amp;nbsp;checkout.&lt;/p&gt;
&lt;p&gt;The coupon makes the &lt;a href="http://courses.learnvfx.com/bundles/nk101-and-nk201?coupon=metapipe_blog_pano_promo"&gt;&lt;span class="caps"&gt;NK101&lt;/span&gt; &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;NK201&lt;/span&gt;
bundle&lt;/a&gt;
just $49.60 (normally&amp;nbsp;$248.00)&lt;/p&gt;
&lt;p&gt;The free lessons are free forever but the coupon for 80% off lifetime access
expires April 30th&amp;nbsp;2017.&lt;/p&gt;
&lt;p&gt;Enjoy the free&amp;nbsp;lessons!&lt;/p&gt;</content><category term="free"></category></entry><entry><title>The History of Linux in VFX and Animation</title><link href="https://www.metapipe.com/blog/posts/2017/03/28/history-of-linux-in-vfx-and-animation/" rel="alternate"></link><published>2017-03-28T08:31:00-06:00</published><updated>2017-03-28T08:31:00-06:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-03-28:/blog/posts/2017/03/28/history-of-linux-in-vfx-and-animation/</id><summary type="html">&lt;p&gt;Nearly all high-end &lt;span class="caps"&gt;VFX&lt;/span&gt; shops use Linux. Why? In this jaunt down the rabbit hole we explore the history of &lt;span class="caps"&gt;C.G.&lt;/span&gt;I production and how we ended up where we are today. I also talk a little bit about why a studio might specifically choose Linux as a choice for large scale&amp;nbsp;production.&lt;/p&gt;</summary><content type="html">&lt;p&gt;People often seem surprised when I tell them that effectively all
high-end &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation shops use
&lt;a href="https://en.wikipedia.org/wiki/Linux"&gt;Linux&lt;/a&gt;. Surely something like
Windows or &lt;span class="caps"&gt;OSX&lt;/span&gt; would be more convenient, right? Maybe so&amp;#8230; or maybe
not. As &lt;a href="/blog/author/ethan-estrada/"&gt;Ethan&lt;/a&gt;
mentioned in an &lt;a href="/blog/posts/2017/03/03/why-linux-for-vfx/"&gt;earlier post&lt;/a&gt;, Linux has some distinct advantages when
deployed at scale and in a pipeline vs traditional desktop operating
systems like Windows and &lt;span class="caps"&gt;OSX&lt;/span&gt;. Also, ignoring the history behind how
the high-end shops ended up where they are today would dismiss a
critical part of the overall story. Animation and &lt;span class="caps"&gt;VFX&lt;/span&gt; shops don’t only
use Linux for the advantages it offers today, there is a certain
amount of legacy behind the choice. Let’s look at the&amp;nbsp;history.&lt;/p&gt;
&lt;p&gt;Almost all of the larger &lt;span class="caps"&gt;C.G.&lt;/span&gt; shops started back in the Unix days,
some of them before Windows or Mac &lt;span class="caps"&gt;OS&lt;/span&gt; even existed. The earliest
&lt;span class="caps"&gt;C.G.&lt;/span&gt; studios were even using Lisp based machines and supercomputers
with custom OSes. Most of those studios no longer exist. Regardless,
the legacy of the older studios and the development of &lt;span class="caps"&gt;IT&lt;/span&gt; in general
impact how we do things&amp;nbsp;today.&lt;/p&gt;
&lt;p&gt;&lt;span class="caps"&gt;TRON&lt;/span&gt; was released in 1982, over 35 years ago! At the time, 3D
&lt;span class="caps"&gt;C.G.I.&lt;/span&gt; required a supercomputer to&amp;nbsp;render.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Image of Cray-1 Supercomputert" src="https://upload.wikimedia.org/wikipedia/commons/thumb/6/6e/Cray_1_IMG_9126.jpg/640px-Cray_1_IMG_9126.jpg"&gt;&lt;/p&gt;
&lt;p&gt;Pictured above is a &lt;a href="https://en.wikipedia.org/wiki/Cray-1"&gt;Cray-1&lt;/a&gt;
Supercomputer. One of these was used to render the &lt;span class="caps"&gt;C.G.I.&lt;/span&gt; in &lt;span class="caps"&gt;TRON&lt;/span&gt;. In
1977 this machine cost $5M - $8M depending on the options ordered. It
had 32MBytes of &lt;span class="caps"&gt;RAM&lt;/span&gt;, ran at 80 MHz and provided 160 &lt;span class="caps"&gt;MFLOPS&lt;/span&gt; of compute
power. To put that in perspective, assuming you have a relatively new
smartphone, the &lt;span class="caps"&gt;ARM&lt;/span&gt; &lt;span class="caps"&gt;CPU&lt;/span&gt; in your phone almost certainly provides over 1
GigaFlop. (That’s 1000 &lt;span class="caps"&gt;MFLOPS&lt;/span&gt;!) of computing power. It most likely has
1 or more &lt;span class="caps"&gt;GIGABYTES&lt;/span&gt; of &lt;span class="caps"&gt;RAM&lt;/span&gt;. Think about that. Your phone is more
powerful than the &lt;span class="caps"&gt;SUPERCOMPUTER&lt;/span&gt; (at the time) used to render
&lt;span class="caps"&gt;TRON&lt;/span&gt;. More amazingly, it’s likely more powerful than the computers
used to render even Jurassic Park!  Imagine how powerful modern &lt;span class="caps"&gt;PC&lt;/span&gt;
hardware is by&amp;nbsp;comparison.&lt;/p&gt;
&lt;p&gt;Of course, back when the hardware required to render 3D &lt;span class="caps"&gt;C.G.I.&lt;/span&gt; filled
a room and cost over $5 million, the desktop computers of the same era
were not even close to being up to the task. There was no 3D hardware
acceleration and the CPUs were not 32bit. Most did not have any
provision for calculating floating point math in hardware, which is a
critical feature for 3D rendering at any reasonable speed. &lt;span class="caps"&gt;RAM&lt;/span&gt; was
still incredibly expensive and the home computers of the era were only
8 or 16 bit. Even if the &lt;span class="caps"&gt;RAM&lt;/span&gt; were affordable, they couldn’t address
very much of it. They were essentially toys compared to the computers
used to do computer graphics at the time. Windows didn’t even exist
and neither did Mac &lt;span class="caps"&gt;OS&lt;/span&gt;.&lt;/p&gt;
&lt;p&gt;Anyone who has heard of
&lt;a href="https://en.wikipedia.org/wiki/Moore's_law"&gt;Moore&amp;#8217;s Law&lt;/a&gt; knows there
is an exponential pace of improvement in the state of the art in
computer science. Computer graphics requires large amounts of compute,
and for years, the cost of compute seemed high. After the era of the
mainframes and supercomputers for the production of &lt;span class="caps"&gt;C.G.&lt;/span&gt; came the era
of the minicomputer and &amp;#8220;workstation&amp;#8221;. These machines were still
expensive but at least they fit in the same room as the
artist. Relative to the mainframes and supercomputers they replaced
for doing &lt;span class="caps"&gt;C.G.&lt;/span&gt; work, they provided a very good performance per
dollar. Most of these machines ran Unix, and this was the era of early
&lt;span class="caps"&gt;C.G.&lt;/span&gt; blockbuster films like Jurassic Park, Terminator 2, and Toy
Story. There was a lot of growth in the &lt;span class="caps"&gt;C.G.&lt;/span&gt; industry in that
period. Not only was animation starting to shift over to computer
graphics, visual effects were driving the demand for photo-real &lt;span class="caps"&gt;C.G.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;In parallel to the development of modern &lt;span class="caps"&gt;C.G.I.&lt;/span&gt; production, the .com
and &lt;span class="caps"&gt;WWW&lt;/span&gt; era of the Internet was maturing.  Unix was building a strong
foothold in the datacenter due to Sun, &lt;span class="caps"&gt;HP&lt;/span&gt;, &lt;span class="caps"&gt;DEC&lt;/span&gt; and &lt;span class="caps"&gt;SGI&lt;/span&gt; servers, which
all ran proprietary Unix variants. The demand for servers to feed the
growing demand for data delivered via the Internet drove the sales of
these computers. It was a less glamourous application of the
technology than C.G., but the higher volumes of machines being sold
helped drive the economy of scale so that the machines were more
affordable for &lt;span class="caps"&gt;C.G.&lt;/span&gt;&amp;nbsp;work.&lt;/p&gt;
&lt;p&gt;&lt;img alt="TUX, the Linux Mascot" src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Tux.svg/280px-Tux.svg.png"&gt;&lt;/p&gt;
&lt;p&gt;By around 1995 Linux,
&lt;a href="https://en.wikipedia.org/wiki/Berkeley_Software_Distribution"&gt;&lt;span class="caps"&gt;BSD&lt;/span&gt; Unix&lt;/a&gt;
and &lt;span class="caps"&gt;PC&lt;/span&gt; hardware were becoming mature enough relative to the established
Minicomputer and “Workstation” class machines that some adventurous
Internet server admins began putting parts of their workloads on &lt;span class="caps"&gt;PC&lt;/span&gt;
hardware. Graphic accelerator cards capable of running OpenGL became
available for the &lt;span class="caps"&gt;PC&lt;/span&gt;.  Folks in the &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation business noticed
this. Home computers were no longer toy-like. They supported 32 bit
processors with integrated floating point units, could accept large
amounts of &lt;span class="caps"&gt;RAM&lt;/span&gt; and be networked via ethernet to connect with high
performance network attached storage. They were getting good enough to
compete with the workstation class machines and clusters of them
worked well for making inexpensive render&amp;nbsp;farms.&lt;/p&gt;
&lt;p&gt;The demand for home computers commoditized the &lt;span class="caps"&gt;PC&lt;/span&gt; and helped drive the
&lt;span class="caps"&gt;PC&lt;/span&gt; revolution. The economy of scale possible when selling commodity &lt;span class="caps"&gt;PC&lt;/span&gt;
hardware allowed for better R&amp;amp;D budgets than what the workstation and
minicomputer vendors could match. &lt;span class="caps"&gt;PC&lt;/span&gt; hardware was catching up with
workstation class hardware and actually started to surpass it in many
ways.  By around 1997, when Linux had begun to really mature,
commodity &lt;span class="caps"&gt;PC&lt;/span&gt; hardware had begun to outpace the minicomputer and
&amp;#8220;workstation&amp;#8221; class stuff from the likes of Sun, &lt;span class="caps"&gt;SGI&lt;/span&gt;, &lt;span class="caps"&gt;HP&lt;/span&gt; and &lt;span class="caps"&gt;IBM&lt;/span&gt;.  The
new &lt;span class="caps"&gt;PC&lt;/span&gt; hardware was sufficiently faster (per dollar spent) than the
&amp;#8220;workstation&amp;#8221; and &amp;#8220;minicomputer&amp;#8221; class stuff from the legacy vendors
that the economics could no longer be ignored. Running Linux on the
new &lt;span class="caps"&gt;PC&lt;/span&gt; hardware was the obvious choice because all the custom software
(after re-compilation) and automation scripts they had created over
the years for Unix would just keep working as usual. Porting the
custom code over to a &lt;span class="caps"&gt;NON&lt;/span&gt;-Unix-Like &lt;span class="caps"&gt;OS&lt;/span&gt; would have been a huge chore
but tweaking it for Linux (which is mostly Posix compliant) was a much
less difficult task. Plus, all the artists at the shops knew and
trusted Unix-like systems. At the time, Windows was for playing video
games and doing spreadsheets, not making &lt;span class="caps"&gt;C.G.&lt;/span&gt; for feature films.  A
little bit of trivia&amp;#8230; I worked at one shop that even still used &lt;span class="caps"&gt;CSH&lt;/span&gt;
(rather than the more modern Bash shell or a more robust scripting
language like Python) due to still having so much automation that was
still dependent on &lt;span class="caps"&gt;CSH&lt;/span&gt;. Legacy support was definitely part of the
equation when making the switch to Linux from proprietary Unix&amp;nbsp;variants.&lt;/p&gt;
&lt;p&gt;So, that’s a quick history of how we ended up where we are. But does
that mean we only use Linux today because we are stuck supporting some
old legacy code from the stone ages? Far from it! I have to agree with
&lt;a href="/blog/posts/2017/03/03/why-linux-for-vfx/"&gt;Ethan&lt;/a&gt; that even
today, Unix-like OSes are more suitable for large scale deployments
and automation. There is a reason nearly the entire Internet and
your smartphone run Linux or some flavor of Unix. What works at scale
for the Internet of course also works at scale for
&lt;span class="caps"&gt;C.G.&lt;/span&gt; production. The standard system shell and file system semantics
alone completely smoke anything on Windows.  Scripting languages like
Python are first class citizens and there is a wealth of Free Open
Source Software available to help address just about any conceivable
need. Basically, with Linux you have some great building blocks for
creating large systems. Plus, the larger the render farm, the more you
save when running Linux vs Windows (While &lt;span class="caps"&gt;OSX&lt;/span&gt; is based on Unix, it
isn&amp;#8217;t an option since Apple doesn&amp;#8217;t license the &lt;span class="caps"&gt;OS&lt;/span&gt; alone. It’s not
possible to run &lt;span class="caps"&gt;OSX&lt;/span&gt; in the cloud.) Netbooting Linux is more straight
forward than Windows also, which makes managing huge fleets of
machines&amp;nbsp;easier.&lt;/p&gt;
&lt;p&gt;Linux supports most of the high end &lt;span class="caps"&gt;DCC&lt;/span&gt; applications a &lt;span class="caps"&gt;C.G.&lt;/span&gt; artist
might want to use but a few notable examples, like Photoshop, are
missing. At present, this is really the only negative of using Linux
vs using something else. Of course, the same could be said for any
&lt;span class="caps"&gt;OS&lt;/span&gt;. There is always some killer app missing from any given
platform. (Final Cut is missing from Windows, &lt;span class="caps"&gt;3DS&lt;/span&gt; Max is missing on
&lt;span class="caps"&gt;OSX&lt;/span&gt;,&amp;nbsp;etc.)&lt;/p&gt;
&lt;p&gt;If you are an aspiring &lt;span class="caps"&gt;VFX&lt;/span&gt; artist I recommend you learn enough Linux
to at least get around in it. Consider learning Python and possibly
some more advanced shell scripting. Assuming your other skills are
solid, a working knowledge of Linux will help you stand out as an
artist &lt;span class="amp"&gt;&amp;amp;&lt;/span&gt; &lt;span class="caps"&gt;TD&lt;/span&gt;.&lt;/p&gt;</content><category term="Linux"></category><category term="tech"></category><category term="explainer"></category></entry><entry><title>LearnVFX Acquisition</title><link href="https://www.metapipe.com/blog/posts/2017/03/22/learnvfx-acquired-by-fullmeta/" rel="alternate"></link><published>2017-03-22T12:30:54-07:00</published><updated>2017-03-22T12:30:54-07:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-03-22:/blog/posts/2017/03/22/learnvfx-acquired-by-fullmeta/</id><summary type="html">&lt;p&gt;LearnVFX.com has been acquired by FullMeta Corp. (Creators of MetaPipe.com). To celebrate, we are giving away a free book, Pipeline&amp;nbsp;101&lt;/p&gt;</summary><content type="html">&lt;p&gt;FullMeta Corp., the creators of MetaPipe.com have acquired
LearnVFX.com, my former training company.  LearnVFX will become our
portal for providing training and cool content for the &lt;span class="caps"&gt;VFX&lt;/span&gt; and
animation&amp;nbsp;community.&lt;/p&gt;
&lt;p&gt;To celebrate we’ve decided to give away my latest creation, Pipeline
101, a free crash course book on &lt;span class="caps"&gt;VFX&lt;/span&gt; and animation pipelines. Feel
free to share the link below. Pipeline 101 is for anyone interested in
how &lt;span class="caps"&gt;C.G.&lt;/span&gt; animation and &lt;span class="caps"&gt;VFX&lt;/span&gt; studios work under the hood. Did I mention
it’s&amp;nbsp;free?&lt;/p&gt;
&lt;p&gt;Grab your free copy here: &lt;a href="/offers/pipeline101/?utm_source=metapipe.com&amp;amp;utm_medium=blog-post&amp;amp;utm_campaign=pipeline101"&gt;Pipeline&amp;nbsp;101&lt;/a&gt;&lt;/p&gt;</content><category term="free"></category></entry><entry><title>SXSW 2017</title><link href="https://www.metapipe.com/blog/posts/2017/03/17/sxsw-2017/" rel="alternate"></link><published>2017-03-17T07:30:00-06:00</published><updated>2017-03-17T07:30:00-06:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-03-17:/blog/posts/2017/03/17/sxsw-2017/</id><summary type="html">&lt;p&gt;Aaron attended sxsw 2017 and it was incredibly inspirational. There’s never been a better time to be a filmmaker. These days, the only constraint in what you can do is your imagination and&amp;nbsp;skill.&lt;/p&gt;</summary><content type="html">&lt;p&gt;If you’ve been watching the
&lt;a href="https://twitter.com/FullMetaPipe"&gt;MetaPipe Twitter feed&lt;/a&gt; you know I
was at South by Southwest this&amp;nbsp;week.&lt;/p&gt;
&lt;p&gt;It was my first time at sxsw and I have to say I was blown away by the
energy and how amazing all the people are. It was incredibly
inspirational. There is a vibe that can only be described as joy. I’m
guessing it stems from the roots of sxsw as a mostly cultural event. A
huge percentage of the people who attend are there to see new movies
and hear new music. They are there to have fun and discover new&amp;nbsp;things.&lt;/p&gt;
&lt;p&gt;I went on an Interactive badge and my primary goal was to network. The
fact everyone was in such a great mood made breaking the ice with
complete strangers easy. I met many fantastic people and had many
great conversations about filmmaking and &lt;span class="caps"&gt;VR&lt;/span&gt;. I also managed to attend
some great presentations and&amp;nbsp;speeches.&lt;/p&gt;
&lt;p&gt;If I had to say what the big takeaway was from my personal perspective
it would be: &lt;strong&gt;There’s never been a better time to be a&amp;nbsp;filmmaker.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Gareth Edwards mentioned it in his
&lt;a href="https://www.sxsw.com/film/2017/gareth-edwards-film-keynote-speaker-2017-sxsw-conference-video/"&gt;Key Note&lt;/a&gt;
and Casey Neistat mentioned it in
&lt;a href="https://youtu.be/rAZyGj83gJo?t=19m9s"&gt;his speech&lt;/a&gt; as well. This is
something I’ve believed since the first &lt;span class="caps"&gt;DV&lt;/span&gt; cameras hit the market in
1995 and even more so since powerful smartphones with &lt;span class="caps"&gt;HD&lt;/span&gt; cameras
became the norm. Camera technology has hit a point where even the most
modest cameras are superior to 16mm film and in some cases even older
35mm film&amp;nbsp;stocks.&lt;/p&gt;
&lt;p&gt;There are no excuses left except for the fear of&amp;nbsp;failure.&lt;/p&gt;
&lt;p&gt;I think that in our hearts, many &lt;span class="caps"&gt;VFX&lt;/span&gt; artists are frustrated filmmakers
the way Gareth Edwards described himself when he was only doing &lt;span class="caps"&gt;VFX&lt;/span&gt;
work. I know I certainly was! When I was at Dreawworks Animation, we
even had a little group called Film Club where we got together to make
48 hour films.  Some of the people in the group had &lt;span class="caps"&gt;VFX&lt;/span&gt; backgrounds,
others had only ever done animation but the common thread was we
wanted more experience with what Gareth described in his talk as “real
time rendering” through the camera. It’s a great way to practice
composition and film language &lt;span class="caps"&gt;QUICKLY&lt;/span&gt; as compared to using computer
graphics. If you haven’t experimented with cameras as a way to
practice your composition and blocking skills, I highly reccomended
it! Photography is also a great way to drive your &lt;span class="caps"&gt;VFX&lt;/span&gt; work, for
example with techniques like photogrammetry, projection mapping and
tile&amp;nbsp;worlds.&lt;/p&gt;
&lt;p&gt;These days, the only constraints in what you can achieve really are
your own imagination and skill. With the cloud, even the constraints
of finite compute resources have been erased. You can think bigger.
Finding collaborators can still be a challenge but we hope to help
with that.  We want to empower people with MetaPipe in every way
possible. We started the company to help remove the technical barriers
holding back artists but as a natural benefit of working in the cloud,
remote collaboration becomes a first class feature. If you have a
dream you want to bring to fruition, contact us. We want to hear from&amp;nbsp;you.&lt;/p&gt;</content><category term="sxsw"></category><category term="conference"></category><category term="inspiration"></category></entry><entry><title>Hierarchy of Needs</title><link href="https://www.metapipe.com/blog/posts/2017/02/28/hierarchy-of-needs/" rel="alternate"></link><published>2017-02-28T12:23:54-07:00</published><updated>2017-02-28T12:23:54-07:00</updated><author><name>Aaron Estrada</name></author><id>tag:www.metapipe.com,2017-02-28:/blog/posts/2017/02/28/hierarchy-of-needs/</id><summary type="html">&lt;p&gt;Task list out of control? Struggling to cut it down to the essentials. Read on for 5 simple steps to clear out your task&amp;nbsp;queue.&lt;/p&gt;</summary><content type="html">&lt;p&gt;MetaPipe&amp;#8217;s &lt;span class="caps"&gt;CTO&lt;/span&gt;, Ethan Estrada, originally posted this article
on his personal blog. I liked it so much that I asked him if I could
repost it here on the &lt;a href="/blog/"&gt;MetaPipe Blog&lt;/a&gt;.
You can find the link to the original article &lt;a href="http://www.misterfidget.com/blog/2017/02/27/hierarchy-of-needs.html"&gt;here&lt;/a&gt;.
However, the article is posted below in its entirety. Please&amp;nbsp;enjoy.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;If you couldn&amp;#8217;t tell, the title of this post is a nod to
&lt;a href="https://en.wikipedia.org/wiki/Maslow%27s_hierarchy_of_needs"&gt;&amp;#8220;Mazlow&amp;#8217;s hierarchy of needs&amp;#8221;&lt;/a&gt;,
a psychological theory about how we prioritize things as humans. This
post isn&amp;#8217;t about that theory&amp;nbsp;whatsoever.&lt;/p&gt;
&lt;!-- more --&gt;

&lt;p&gt;This particular hierarchy of needs has to do with prioritizing tasks
to accomplish a goal. I am not the master goal setter in the world. I
don&amp;#8217;t claim to be some sort of planning guru. Far from it. But I have
had a thought about a simple way to deal with task lists. It has all
been inspired by conversation with my friend
&lt;span class="caps"&gt;AJ&lt;/span&gt; and
&lt;a href="http://blog.trello.com/why-your-to-do-list-is-going-nowhere"&gt;an article I read on Trello&amp;#8217;s blog&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;In short, the article&amp;#8217;s (and &lt;span class="caps"&gt;AJ&lt;/span&gt;&amp;#8217;s) point
is that often our task lists aren&amp;#8217;t correlated to projects; there are
a bunch of things to get done, but they don&amp;#8217;t always drive us toward
completing our projects.  The idea is you should prioritize those
things that actually drive you closer to project completion. So, the
problem isn&amp;#8217;t your task list; it is the fact that the tasks are just
tasks, not attached to anything. I love the idea; it&amp;#8217;s something I
think most of us know, but forget far too easily. I sure know I
do. Thanks for getting me started down the path
&lt;span class="caps"&gt;AJ&lt;/span&gt;!&lt;/p&gt;
&lt;p&gt;Once I finished the article, I thought, &amp;#8220;But how does one actually do
that? A lot of those tasks that don&amp;#8217;t push us towards our ultimate
goals and project completions are still critical things that &lt;em&gt;need&lt;/em&gt; to
get done.&amp;#8221; As I thought about it, I came up with a simple list to help
remind my self what my options are in such circumstances. In essence,
with any any task that doesn&amp;#8217;t drive you towards a goal, you ask
yourself if you can do one of the things listed below, in the order
listed. Do this with each task. In fact, it wouldn&amp;#8217;t be a bad idea to
do this with all your tasks, both project/goal aligned and&amp;nbsp;otherwise.&lt;/p&gt;
&lt;p&gt;In order of preferability, here are the options you should try to
apply to each task (with further explanation below): &lt;strong&gt;Eliminate&lt;/strong&gt;,
&lt;strong&gt;Automate&lt;/strong&gt;, &lt;strong&gt;Delegate&lt;/strong&gt;, &lt;strong&gt;Degenerate&lt;/strong&gt;, &lt;strong&gt;Procrastinate&lt;/strong&gt;.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Eliminate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Can a task be outright eliminated? Can you quit a job or quit
your volunteer position in an organization that isn&amp;#8217;t driving you
towards your goal/project completion? Do you really need to add
that one extra cool feature to your
app/library/product/animation/film/game, or can you do without it
and ship it on time or earlier? Sometimes elimination just isn&amp;#8217;t
possible, but it should be our first go to; the easiest tasks to
complete are the ones you don&amp;#8217;t need to complete in the first&amp;nbsp;place.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Automate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is there a phone app, a program, a service, an &lt;span class="caps"&gt;AI&lt;/span&gt; assistant, or a
script you could use to get the task done for you without your
intervention or with minimal intervention on your part? If you are
a software developer, would it take less time to code up a solution
than it would be to do it repeatedly by hand? Some tasks are one
offs, so scripting your own solution might not make sense, but
perhaps someone else has already done the work to automate it. Even
if this costs money it is often worth it. The simple formula is to
compare your hourly wage to the cost of the product. For example,
if you are paid the Federal Minimum wage, any automated service
that can save you at least one hour of tedious work is worth $7.25
&lt;span class="caps"&gt;USD&lt;/span&gt; (the
&lt;a href="https://www.dol.gov/whd/state/stateMinWageHis.htm"&gt;&lt;span class="caps"&gt;US&lt;/span&gt; Federal Minimum Wage as of last year, 2016&lt;/a&gt;).
Then you could spend your hour doing something more worthwhile;
like learning a new skill that will earn you more than minimum
wage.&amp;nbsp;¯\_(ツ)_/¯&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Delegate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Is there someone who works for you or with you who has the
bandwidth and aptitude to accomplish the task? Will it take more
time to train the person than it would be to just do it yourself?
If it is a repeating task, perhaps the time lost training someone
else upfront can be made up in the long run (just as with
automation via&amp;nbsp;scripting).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Degenerate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Can you sacrifice on quality? Often, 80% of the effort goes into
the last 20% of quality of a pursuit. Does the task really need to
be treated as top tier, or is it &lt;span class="caps"&gt;OK&lt;/span&gt; to just phone it in with 20% of
the effort for 80% of the quality and save yourself a lot of time?
Confession time: I am a perfectionist. I don&amp;#8217;t mention this as some
sort of humble-brag, but with true chagrin. I either do something
with the best that I have got, or I don&amp;#8217;t do it at all. It is very
binary and very unhealthy. It means a lot of stuff that should end
up happening simply doesn&amp;#8217;t. I think a lot of other people are the
same too. Be &lt;span class="caps"&gt;OK&lt;/span&gt; with putting in less than your best to get
something less important off of your list quickly. As for me
putting this into action, I am not proof-reading this a million
times or sitting on it for multiple days like I usually do. So,
please excuse errors. Or don&amp;#8217;t. It doesn&amp;#8217;t matter because I am
posting it whether you excuse the errors or not. I&amp;#8217;m trying to be
&lt;span class="caps"&gt;OK&lt;/span&gt; with not giving 100% on this one, because it doesn&amp;#8217;t further my
most important goals and associated&amp;nbsp;projects.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Procrastinate&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;If worst comes to worst and you truly do need to give your level
best, can this task simply be put off for a while? I know, I know;
your mother and/or father told you to never procrastinate, but the
reality is that we do it all the time anyway without thinking about
it. The difference here is that you are doing it consciously and
purposefully. Really, another term for procrastination is
prioritization, but it just sounds far worse. Which is why I chose
it: so that both you and I will remember to actually do it! Also,
Prioritize doesn&amp;#8217;t rhyme with the other options like Procrastinate
does ;). To make it a less dirty word, let&amp;#8217;s call it Planned
Procrastination. At some point your workload is going to lighten
some and there will be time to do that one nagging thing. Of
course, all procrastinated things must eventually be done, which is
why this is the last possible option available and easily the least&amp;nbsp;desirable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;I have yet to think of any other possibilities. Thoughts and
suggestions are welcome on this one. More options are always better. I
wrote this post for myself more than anyone. I need reminders like
this, and I like simple steps and systems I can follow. Life isn&amp;#8217;t
always so clean cut and tidy, so they end up just being guidelines,
not hard and fast rules. But even loose guidelines are better than
nothing. And with that I say, Carpe&amp;nbsp;Diem!&lt;/p&gt;</content><category term="repost"></category><category term="planning"></category></entry></feed>